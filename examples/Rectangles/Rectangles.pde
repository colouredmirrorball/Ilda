/*
  Example sketch to send laser frames generated by the ilda library to LSX using the OSC protocol.
 For this example to work, LSX has to run on the same computer with an Animation event on timeline 1 set to frame 10.
 The frames generated in this sketch will appear in the Animation event.
 */


import be.cmbsoft.ilda.*;
import be.cmbsoft.laseroutput.*;

//The canvas for laser art, treat this as a PGraphics
IldaRenderer r;

// The output can receive laser art from the renderer and send it to a laser
LaserOutput output;

//Some bouncy bois
ArrayList<Rectangle> rects = new ArrayList<Rectangle>();

void setup()
{

  size(600, 600, P3D);

  r = new IldaRenderer(this);

  //This line causes the renderer to keep on reusing its current frame, otherwise it would create a new frame in each draw() loop
  r.setOverwrite(true);

  //Add the bouncy bois!
  for (int i =0; i < 5; i++)
  {
    rects.add(new Rectangle());
  }

  // The LSX OSC output sends frames over OSC to LSX.
  output = new LsxOscOutput(1, // Timeline (projector number)
    10, // Frame catalog index
    "127.0.0.1", // IP address of computer running LSX
    10000 // Port of the LSX OSC server. This can be changed using Setup >> Remote Control >> OSC Setup >> Listening port.
    );
}

void draw()
{
  background(0);

  //To begin creating laser frames, use beginDraw() on the IldaRenderer
  r.beginDraw();
  r.background();    //this line removes the points from the previous frame

  for (Rectangle rect : rects)
  {
    rect.update();    //update the rectangle's position
    r.stroke(rect.colour);
    r.rect(rect.x, rect.y, 40, 40);    //draw the rectangle on the IldaRenderer, previous line specifies colour
  }

  //Don't forget to call endDraw()!
  r.endDraw();

  IldaFrame frame = r.getCurrentFrame();

  //The next line displays the laser frame on the Processing canvas
  frame.renderFrame(this, false);

  output.project(frame);
}

void mouseClicked()
{
  rects.add(new Rectangle(mouseX, mouseY));
}

void keyPressed()
{
  if (key == 'c') rects.clear();
}

void exit() {
  // It is a good idea to clear output to the projector when exiting
  output.sendEmptyFrame();
  super.exit();
}



class Rectangle
{
  float x, y;
  float velx, vely;
  int colour;
  Rectangle()
  {
    this( random(width), random(height));
  }

  Rectangle(float x, float y)
  {
    this.x = x;
    this.y = y;
    velx = random(-5, 5);
    vely = random(-5, 5);
    colour = color(random(255), random(255), random(255));
  }

  void update()
  {
    x += velx;
    y += vely;

    if (x < 0)
    {
      velx = -velx;
      x = 0;
    }
    if (x > width-40)
    {
      velx = - velx;
      x = width-40;
    }
    if (y < 0)
    {
      vely = - vely;
      y = 0;
    }
    if (y > height-40)
    {
      vely = - vely;
      y = height-40;
    }
  }
}
